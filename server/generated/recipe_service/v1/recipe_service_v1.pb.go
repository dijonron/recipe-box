// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: recipe_service/v1/recipe_service_v1.proto

package recipepb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for units of measurement.
type Measurement int32

const (
	Measurement_MEASUREMENT_UNSPECIFIED Measurement = 0
	Measurement_MEASUREMENT_UNIT        Measurement = 1
	Measurement_MEASUREMENT_TSP         Measurement = 2
	Measurement_MEASUREMENT_TBSP        Measurement = 3
	Measurement_MEASUREMENT_CUP         Measurement = 4
	Measurement_MEASUREMENT_MILLILITER  Measurement = 6
	Measurement_MEASUREMENT_LITER       Measurement = 5
	Measurement_MEASUREMENT_GRAM        Measurement = 7
)

// Enum value maps for Measurement.
var (
	Measurement_name = map[int32]string{
		0: "MEASUREMENT_UNSPECIFIED",
		1: "MEASUREMENT_UNIT",
		2: "MEASUREMENT_TSP",
		3: "MEASUREMENT_TBSP",
		4: "MEASUREMENT_CUP",
		6: "MEASUREMENT_MILLILITER",
		5: "MEASUREMENT_LITER",
		7: "MEASUREMENT_GRAM",
	}
	Measurement_value = map[string]int32{
		"MEASUREMENT_UNSPECIFIED": 0,
		"MEASUREMENT_UNIT":        1,
		"MEASUREMENT_TSP":         2,
		"MEASUREMENT_TBSP":        3,
		"MEASUREMENT_CUP":         4,
		"MEASUREMENT_MILLILITER":  6,
		"MEASUREMENT_LITER":       5,
		"MEASUREMENT_GRAM":        7,
	}
)

func (x Measurement) Enum() *Measurement {
	p := new(Measurement)
	*p = x
	return p
}

func (x Measurement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Measurement) Descriptor() protoreflect.EnumDescriptor {
	return file_recipe_service_v1_recipe_service_v1_proto_enumTypes[0].Descriptor()
}

func (Measurement) Type() protoreflect.EnumType {
	return &file_recipe_service_v1_recipe_service_v1_proto_enumTypes[0]
}

func (x Measurement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Measurement.Descriptor instead.
func (Measurement) EnumDescriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{0}
}

// Recipe message to represent the recipe.
type Recipe struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // Unique identifier for the recipe.
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // Name of the recipe (e.g. Chocolate Chip Cookies).
	Chef          string                 `protobuf:"bytes,3,opt,name=chef,proto3" json:"chef,omitempty"`               // Chef of the reipe (e.g. Betty Crocker).
	Cookbook      string                 `protobuf:"bytes,4,opt,name=cookbook,proto3" json:"cookbook,omitempty"`       // Cookbook where the recipe instructions are found (e.g. Salt, Fat, Acid, Heat).
	Ingredients   []*RecipeIngredient    `protobuf:"bytes,5,rep,name=ingredients,proto3" json:"ingredients,omitempty"` // Ingredients required for the recipe (e.g. Butter, Flour, etc.).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{0}
}

func (x *Recipe) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Recipe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recipe) GetChef() string {
	if x != nil {
		return x.Chef
	}
	return ""
}

func (x *Recipe) GetCookbook() string {
	if x != nil {
		return x.Cookbook
	}
	return ""
}

func (x *Recipe) GetIngredients() []*RecipeIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

// Ingredient message to represent the ingredient data.
type RecipeIngredient struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IngredientId  string                 `protobuf:"bytes,1,opt,name=ingredient_id,json=ingredientId,proto3" json:"ingredient_id,omitempty"`               // Ingredient ID from Ingredient service
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                   // Name of the ingredient (e.g. Butter).
	Amount        float32                `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`                                             // Amount (e.g. 1.25, 4).
	Measurement   Measurement            `protobuf:"varint,4,opt,name=measurement,proto3,enum=recipe_service.v1.Measurement" json:"measurement,omitempty"` // Unit of measurement (e.g. cup, tbsp).
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeIngredient) Reset() {
	*x = RecipeIngredient{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeIngredient) ProtoMessage() {}

func (x *RecipeIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeIngredient.ProtoReflect.Descriptor instead.
func (*RecipeIngredient) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{1}
}

func (x *RecipeIngredient) GetIngredientId() string {
	if x != nil {
		return x.IngredientId
	}
	return ""
}

func (x *RecipeIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeIngredient) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *RecipeIngredient) GetMeasurement() Measurement {
	if x != nil {
		return x.Measurement
	}
	return Measurement_MEASUREMENT_UNSPECIFIED
}

// Request message for creating a recipe.
type CreateRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"` // The recipe to create.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeRequest) Reset() {
	*x = CreateRecipeRequest{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRequest) ProtoMessage() {}

func (x *CreateRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeRequest) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRecipeRequest) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

// Response message for an ingredient.
type CreateRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeResponse) Reset() {
	*x = CreateRecipeResponse{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeResponse) ProtoMessage() {}

func (x *CreateRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeResponse) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRecipeResponse) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

// Request message for fetching a recipe by its ID.
type GetRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // ID of the recipe to fetch.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRequest) Reset() {
	*x = GetRecipeRequest{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRequest) ProtoMessage() {}

func (x *GetRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRequest) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecipeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Response message for an ingredient.
type GetRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeResponse) Reset() {
	*x = GetRecipeResponse{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeResponse) ProtoMessage() {}

func (x *GetRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeResponse) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{5}
}

func (x *GetRecipeResponse) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

// Request message for listing recipes.
type ListRecipesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`   // Optional limit for pagination
	Offset        int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // Optional offset for pagination
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecipesRequest) Reset() {
	*x = ListRecipesRequest{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecipesRequest) ProtoMessage() {}

func (x *ListRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecipesRequest.ProtoReflect.Descriptor instead.
func (*ListRecipesRequest) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{6}
}

func (x *ListRecipesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRecipesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Response message for returning the ingredients list.
type ListRecipesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipes       []*Recipe              `protobuf:"bytes,1,rep,name=recipes,proto3" json:"recipes,omitempty"` // List of recipes.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRecipesResponse) Reset() {
	*x = ListRecipesResponse{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRecipesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRecipesResponse) ProtoMessage() {}

func (x *ListRecipesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRecipesResponse.ProtoReflect.Descriptor instead.
func (*ListRecipesResponse) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{7}
}

func (x *ListRecipesResponse) GetRecipes() []*Recipe {
	if x != nil {
		return x.Recipes
	}
	return nil
}

// Request message for updating a recipe by its ID.
type UpdateRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                   // Recipe ID to update
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`               // New name for the recipe
	Ingredients   []*RecipeIngredient    `protobuf:"bytes,3,rep,name=ingredients,proto3" json:"ingredients,omitempty"` // Updated list of ingredients
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeRequest) Reset() {
	*x = UpdateRecipeRequest{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRequest) ProtoMessage() {}

func (x *UpdateRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRequest) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRecipeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateRecipeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateRecipeRequest) GetIngredients() []*RecipeIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

// Response message for an ingredient.
type UpdateRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,1,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeResponse) Reset() {
	*x = UpdateRecipeResponse{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeResponse) ProtoMessage() {}

func (x *UpdateRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeResponse) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRecipeResponse) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

type DeleteRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Recipe ID to delete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRecipeRequest) Reset() {
	*x = DeleteRecipeRequest{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecipeRequest) ProtoMessage() {}

func (x *DeleteRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecipeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRecipeRequest) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRecipeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// DeleteRecipeResponse message
type DeleteRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRecipeResponse) Reset() {
	*x = DeleteRecipeResponse{}
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRecipeResponse) ProtoMessage() {}

func (x *DeleteRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recipe_service_v1_recipe_service_v1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRecipeResponse.ProtoReflect.Descriptor instead.
func (*DeleteRecipeResponse) Descriptor() ([]byte, []int) {
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP(), []int{11}
}

var File_recipe_service_v1_recipe_service_v1_proto protoreflect.FileDescriptor

var file_recipe_service_v1_recipe_service_v1_proto_rawDesc = []byte{
	0x0a, 0x29, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a,
	0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x68, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x68, 0x65, 0x66, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6b, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x45, 0x0a, 0x0b, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22,
	0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0x4a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x49,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xc9, 0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x41, 0x53,
	0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x53, 0x50, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x42, 0x53, 0x50, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x55, 0x50, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49,
	0x4c, 0x49, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x52,
	0x41, 0x4d, 0x10, 0x07, 0x32, 0xeb, 0x04, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a,
	0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x12, 0x23, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x3a, 0x01, 0x2a, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x79, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x26, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x2a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x42, 0x33, 0x5a, 0x31, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recipe_service_v1_recipe_service_v1_proto_rawDescOnce sync.Once
	file_recipe_service_v1_recipe_service_v1_proto_rawDescData = file_recipe_service_v1_recipe_service_v1_proto_rawDesc
)

func file_recipe_service_v1_recipe_service_v1_proto_rawDescGZIP() []byte {
	file_recipe_service_v1_recipe_service_v1_proto_rawDescOnce.Do(func() {
		file_recipe_service_v1_recipe_service_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_recipe_service_v1_recipe_service_v1_proto_rawDescData)
	})
	return file_recipe_service_v1_recipe_service_v1_proto_rawDescData
}

var file_recipe_service_v1_recipe_service_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_recipe_service_v1_recipe_service_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_recipe_service_v1_recipe_service_v1_proto_goTypes = []any{
	(Measurement)(0),             // 0: recipe_service.v1.Measurement
	(*Recipe)(nil),               // 1: recipe_service.v1.Recipe
	(*RecipeIngredient)(nil),     // 2: recipe_service.v1.RecipeIngredient
	(*CreateRecipeRequest)(nil),  // 3: recipe_service.v1.CreateRecipeRequest
	(*CreateRecipeResponse)(nil), // 4: recipe_service.v1.CreateRecipeResponse
	(*GetRecipeRequest)(nil),     // 5: recipe_service.v1.GetRecipeRequest
	(*GetRecipeResponse)(nil),    // 6: recipe_service.v1.GetRecipeResponse
	(*ListRecipesRequest)(nil),   // 7: recipe_service.v1.ListRecipesRequest
	(*ListRecipesResponse)(nil),  // 8: recipe_service.v1.ListRecipesResponse
	(*UpdateRecipeRequest)(nil),  // 9: recipe_service.v1.UpdateRecipeRequest
	(*UpdateRecipeResponse)(nil), // 10: recipe_service.v1.UpdateRecipeResponse
	(*DeleteRecipeRequest)(nil),  // 11: recipe_service.v1.DeleteRecipeRequest
	(*DeleteRecipeResponse)(nil), // 12: recipe_service.v1.DeleteRecipeResponse
}
var file_recipe_service_v1_recipe_service_v1_proto_depIdxs = []int32{
	2,  // 0: recipe_service.v1.Recipe.ingredients:type_name -> recipe_service.v1.RecipeIngredient
	0,  // 1: recipe_service.v1.RecipeIngredient.measurement:type_name -> recipe_service.v1.Measurement
	1,  // 2: recipe_service.v1.CreateRecipeRequest.recipe:type_name -> recipe_service.v1.Recipe
	1,  // 3: recipe_service.v1.CreateRecipeResponse.recipe:type_name -> recipe_service.v1.Recipe
	1,  // 4: recipe_service.v1.GetRecipeResponse.recipe:type_name -> recipe_service.v1.Recipe
	1,  // 5: recipe_service.v1.ListRecipesResponse.recipes:type_name -> recipe_service.v1.Recipe
	2,  // 6: recipe_service.v1.UpdateRecipeRequest.ingredients:type_name -> recipe_service.v1.RecipeIngredient
	1,  // 7: recipe_service.v1.UpdateRecipeResponse.recipe:type_name -> recipe_service.v1.Recipe
	3,  // 8: recipe_service.v1.RecipeService.CreateRecipe:input_type -> recipe_service.v1.CreateRecipeRequest
	5,  // 9: recipe_service.v1.RecipeService.GetRecipe:input_type -> recipe_service.v1.GetRecipeRequest
	7,  // 10: recipe_service.v1.RecipeService.ListRecipes:input_type -> recipe_service.v1.ListRecipesRequest
	9,  // 11: recipe_service.v1.RecipeService.UpdateRecipe:input_type -> recipe_service.v1.UpdateRecipeRequest
	11, // 12: recipe_service.v1.RecipeService.DeleteRecipe:input_type -> recipe_service.v1.DeleteRecipeRequest
	4,  // 13: recipe_service.v1.RecipeService.CreateRecipe:output_type -> recipe_service.v1.CreateRecipeResponse
	6,  // 14: recipe_service.v1.RecipeService.GetRecipe:output_type -> recipe_service.v1.GetRecipeResponse
	8,  // 15: recipe_service.v1.RecipeService.ListRecipes:output_type -> recipe_service.v1.ListRecipesResponse
	10, // 16: recipe_service.v1.RecipeService.UpdateRecipe:output_type -> recipe_service.v1.UpdateRecipeResponse
	12, // 17: recipe_service.v1.RecipeService.DeleteRecipe:output_type -> recipe_service.v1.DeleteRecipeResponse
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_recipe_service_v1_recipe_service_v1_proto_init() }
func file_recipe_service_v1_recipe_service_v1_proto_init() {
	if File_recipe_service_v1_recipe_service_v1_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recipe_service_v1_recipe_service_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recipe_service_v1_recipe_service_v1_proto_goTypes,
		DependencyIndexes: file_recipe_service_v1_recipe_service_v1_proto_depIdxs,
		EnumInfos:         file_recipe_service_v1_recipe_service_v1_proto_enumTypes,
		MessageInfos:      file_recipe_service_v1_recipe_service_v1_proto_msgTypes,
	}.Build()
	File_recipe_service_v1_recipe_service_v1_proto = out.File
	file_recipe_service_v1_recipe_service_v1_proto_rawDesc = nil
	file_recipe_service_v1_recipe_service_v1_proto_goTypes = nil
	file_recipe_service_v1_recipe_service_v1_proto_depIdxs = nil
}
